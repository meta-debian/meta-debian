diff --git a/Lib/distutils/sysconfig.py b/Lib/distutils/sysconfig.py
index ddb4658..119e34b 100644
--- a/Lib/distutils/sysconfig.py
+++ b/Lib/distutils/sysconfig.py
@@ -19,8 +19,8 @@ import sys
 from distutils.errors import DistutilsPlatformError
 
 # These are needed in a couple of spots, so just compute them once.
-PREFIX = os.path.normpath(sys.prefix)
-EXEC_PREFIX = os.path.normpath(sys.exec_prefix)
+PREFIX = os.path.normpath(sys.prefix).replace( os.getenv("BUILD_SYS"), os.getenv("HOST_SYS") )
+EXEC_PREFIX = os.path.normpath(sys.exec_prefix).replace( os.getenv("BUILD_SYS"), os.getenv("HOST_SYS") )
 
 # Path to the base directory of the project. On Windows the binary may
 # live in project/PCBuild9.  If we're dealing with an x64 Windows build,
@@ -77,6 +77,8 @@ def get_python_inc(plat_specific=0, prefix=None):
     If 'prefix' is supplied, use it instead of sys.prefix or
     sys.exec_prefix -- i.e., ignore 'plat_specific'.
     """
+    if prefix is None:
+        prefix = os.environ['STAGING_INCDIR'].rstrip('include')
 
     if os.name == "posix":
         if python_build:
@@ -121,7 +121,10 @@ def get_python_lib(plat_specific=0, standard_lib=0, prefix=None):
     """
     is_default_prefix = not prefix or os.path.normpath(prefix) in ('/usr', '/usr/local')
     if prefix is None:
-        prefix = plat_specific and EXEC_PREFIX or PREFIX
+        if plat_specific:
+            prefix = os.environ['STAGING_INCDIR'].rstrip('include')
+        else:
+            prefix = PREFIX
 
     if os.name == "posix":
         libpython = os.path.join(prefix,
@@ -260,7 +264,7 @@ def get_config_h_filename():
     else:
         # The name of the config.h file changed in 2.2
         config_h = 'pyconfig.h'
-    return os.path.join(inc_dir, config_h)
+    return os.path.join(inc_dir, config_h).replace( os.getenv("BUILD_SYS"), os.getenv("HOST_SYS") )
 
 
 def get_makefile_filename():
@@ -268,8 +272,8 @@ def get_makefile_filename():
     """Return full pathname of installed Makefile from the Python build."""
     if python_build:
         return os.path.join(project_base, "Makefile")
-    lib_dir = get_python_lib(plat_specific=1, standard_lib=1)
-    return os.path.join(get_config_var('LIBPL'), "Makefile")
+    lib_dir = get_python_lib(plat_specific=1, standard_lib=1).replace( os.getenv("BUILD_SYS"), os.getenv("HOST_SYS") )
+    return os.path.join(lib_dir, "config-" + os.environ['DEB_HOST_MULTIARCH'], "Makefile")
 
 
 def parse_config_h(fp, g=None):
