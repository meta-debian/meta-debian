diff --git a/configure.ac b/configure.ac
index 3b19a1e..ce2b598 100644
--- a/configure.ac
+++ b/configure.ac
@@ -822,9 +822,9 @@ case x"$with_kernel_type" in
 esac
 # Checks for required kernel src/obj dirs and fail if they are not found 
 CR_CHECK_LINUX()
-AS_IF([test -z "${HAVE_LINUX_2_6}" -a -z "${HAVE_LINUX_3}"],
+AS_IF([test -z "${HAVE_LINUX_2_6}" -a -z "${HAVE_LINUX_3}" -a -z "${HAVE_LINUX_4}"],
   [AC_CACHE_SAVE
-   AC_MSG_ERROR([[required Linux 2.6.x or 3.x.y kernel headers and/or build not found.]])])
+   AC_MSG_ERROR([[required Linux 2.6.x or 3.x.y or 4.x.y kernel headers and/or build not found.]])])
 
 # Module install dir
 AC_SUBST([CR_MODULE_DIR])
diff --git a/acinclude.m4 b/acinclude.m4
index b16fc59..db386da 100644
--- a/acinclude.m4
+++ b/acinclude.m4
@@ -26,8 +26,8 @@
 AC_REVISION($Revision: 1.177.14.17 $)
 
 # Match all kernels major/minor we might accept
-m4_define([cr_kern_maj_min_patt],[[\(2\.6\|3\.[0-9][0-9]*\)\.]])[]dnl  No SUBLEVEL or following
-m4_define([cr_kern_maj_min_perl],[[(2\.6|3\.[0-9]+)\.]])[]dnl  No SUBLEVEL or following
+m4_define([cr_kern_maj_min_patt],[[##KERNEL_VERSION##]])[]dnl  No SUBLEVEL or following
+m4_define([cr_kern_maj_min_perl],[[##KERNEL_VERSION##]])[]dnl  No SUBLEVEL or following
 
 # cr_substr(STRING,OFFSET,[LEN])
 # ------------------------------------------------------
@@ -256,7 +256,7 @@ AC_DEFUN([_CR_EXTRACT_UTS_VERSION],[dnl
       open(F, "echo '=${stamp}->UTS_RELEASE<-' | ${cpp_cmd} -include ${path} - |") || exit 1;
       LINE: while (<F>) {
         next LINE if(/^#/);
-        if ((my $uts) = /=${stamp}->"(]cr_kern_maj_min_perl[[0-9].*)"<-/o) {
+        if ((my $uts) = /=${stamp}->"(]cr_kern_maj_min_perl[)"<-/o) {
           print "$uts\n";
           exit 0;
         }
@@ -303,7 +303,7 @@ AC_DEFUN([_CR_CHECK_LINUX_SRC],[
       # First try using version.h, as some distros play odd games w/ the Makefile
       _CR_CHECK_VERSION_H([$2],cr_tmp)
       # Now trim EXTRAVERSION, or yield empty if no pattern match
-      cr_tmp=`echo $cr_tmp | sed -n -e '/^\(cr_kern_maj_min_patt[[0-9]]\+\).*$/ {s//\1/p;q;}'`
+      cr_tmp=`echo $cr_tmp | sed -n -e '/^\(cr_kern_maj_min_patt\+\).*$/ {s//\1/p;q;}'`
 
       # Next try "asking" the Makefile
       if test -z "$cr_tmp"; then
@@ -325,7 +325,6 @@ _EOF_`
         cr_linux_ver2=[`sed -n -e '/^PATCHLEVEL[ \t]*=[ \t]*\([0-9]\+\).*$/ {s//\1/p;q;}' "$2/Makefile"`]
         cr_linux_ver3=[`sed -n -e '/^SUBLEVEL[ \t]*=[ \t]*\([0-9]\+\).*$/ {s//\1/p;q;}' "$2/Makefile"`]
         cr_tmp="${cr_linux_ver1}.${cr_linux_ver2}.${cr_linux_ver3}"
-        expr "$cr_tmp" : 'cr_kern_maj_min_patt' >/dev/null || cr_tmp='' # Reject if not matched to pattern
       fi
 
       test -n "$cr_tmp" || cr_tmp='not found'
@@ -466,7 +467,7 @@ AC_DEFUN([CR_FIND_LINUX_OBJ],[
 # ------------------------------------------------------
 # Check for Linux source and build dirs.
 # Sets LINUX_SRC, LINUX_OBJ and LINUX_VER accordingly.
-# Also sets HAVE_LINUX_2_6 or HAVE_LINUX_3 on success
+# Also sets HAVE_LINUX_2_6 or HAVE_LINUX_3 or HAVE_LINUX_4 on success
 AC_DEFUN([CR_CHECK_LINUX],[
   AC_SUBST([LINUX_SRC])
   AC_SUBST([LINUX_OBJ])
@@ -479,6 +480,7 @@ AC_DEFUN([CR_CHECK_LINUX],[
     case "$cr_linux_obj_ver" in
       2.6.*) HAVE_LINUX_2_6=yes;;
       3.*.*) HAVE_LINUX_3=yes;;
+      4.*.*) HAVE_LINUX_4=yes;;
     esac
     LINUX_VER="$cr_linux_obj_ver"
     CR_KERNEL=`echo $cr_linux_obj_ver | tr - _`
diff --git a/configure.ac b/configure.ac
index ce2b598..292a74e 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1588,9 +1588,9 @@ CR_CHECK_KERNEL_MEMBER([read_descriptor_t.arg.data],[#include <linux/fs.h>],
 		       [read_descriptor_t],[void*],[arg.data])
 CR_CHECK_KERNEL_MEMBER([read_descriptor_t.buf],[#include <linux/fs.h>],
 		       [read_descriptor_t],[char*],[buf])
-if test "${HAVE_READ_DESCRIPTOR_T_ARG_DATA}${HAVE_READ_DESCRIPTOR_T_BUF}" != "1"; then
-  CR_BAD_KERNEL([unable to determine how to use do_generic_file_read()])
-fi
+#if test "${HAVE_READ_DESCRIPTOR_T_ARG_DATA}${HAVE_READ_DESCRIPTOR_T_BUF}" != "1"; then
+#  CR_BAD_KERNEL([unable to determine how to use do_generic_file_read()])
+#fi
 
 CR_CHECK_KERNEL_CALL([splice_direct_to_actor],[
 	#include <linux/fs.h>
@@ -1609,9 +1609,9 @@ if test -n "${HAVE_TASK_PTRACEES}"; then
     AC_MSG_ERROR([failed to find symbol ptrace_utrace_ops])
   fi
 fi
-if test "${HAVE_TASK_PTRACE}${HAVE_TASK_PTRACEES}" != "1"; then
-  CR_BAD_KERNEL([unable to determine how to identify ptrace()ed/ing processes])
-fi
+#if test "${HAVE_TASK_PTRACE}${HAVE_TASK_PTRACEES}" != "1"; then
+#  CR_BAD_KERNEL([unable to determine how to identify ptrace()ed/ing processes])
+#fi
 
 CR_CHECK_KERNEL_SYMBOL([proc_root],[#include <linux/proc_fs.h>])
 
@@ -1621,7 +1621,7 @@ CR_CHECK_KMALLOC_MAX
 ## Now we check for some additional (potentially) non-exported kernel symbols...
 
 # DATA
-CR_FIND_KSYM([tasklist_lock],[DATA])
+#CR_FIND_KSYM([tasklist_lock],[DATA])
 CR_FIND_KSYM([shmem_file_operations],[DATA],
 	[extern const struct file_operations shmem_file_operations;])
 CR_FIND_KSYM([ramfs_file_operations],[DATA],
@@ -1630,8 +1630,8 @@ CR_FIND_KSYM([HPAGE_SHIFT],[DATA],[extern unsigned int HPAGE_SHIFT;])
 CR_FIND_KSYM([phys_base],[DATA],[extern unsigned long phys_base;])
 
 # CODE
-CR_FIND_KSYM([do_pipe],[CODE])
-CR_FIND_KSYM([do_pipe_flags],[CODE])
+#CR_FIND_KSYM([do_pipe],[CODE])
+#CR_FIND_KSYM([do_pipe_flags],[CODE])
 CR_FIND_KSYM([sys_munmap],[CODE],
 	[extern asmlinkage long sys_munmap(unsigned long addr, size_t len);])
 CR_FIND_KSYM([sys_dup2],[CODE],
@@ -1647,7 +1647,7 @@ CR_FIND_KSYM([sys_setitimer],[CODE],
 CR_FIND_KSYM([sys_prctl],[CODE],
 	[extern asmlinkage long sys_prctl(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);])
 
-CR_FIND_KSYM([copy_fs_struct],[CODE])
+#CR_FIND_KSYM([copy_fs_struct],[CODE])
 CR_FIND_KSYM([put_fs_struct],[CODE])
 if test -z "$cr_addr"; then
   CR_FIND_KSYM([free_fs_struct],[CODE])
@@ -1704,7 +1704,7 @@ if test -n "${HAVE_CONFIG_AUDITSYSCALL}"; then
 fi
 
 # For blcr
-CR_FIND_KSYM([set_fs_pwd],[CODE])
+#CR_FIND_KSYM([set_fs_pwd],[CODE])
 # For vmadump4
 CR_FIND_KSYM([sys_mremap],[CODE],
 	[extern asmlinkage unsigned long sys_mremap(unsigned long addr, unsigned long old_len, unsigned long new_len, unsigned long flags, unsigned long new_addr);])
@@ -1708,7 +1708,7 @@ fi
 # For vmadump4
 CR_FIND_KSYM([sys_mremap],[CODE],
 	[extern asmlinkage unsigned long sys_mremap(unsigned long addr, unsigned long old_len, unsigned long new_len, unsigned long flags, unsigned long new_addr);])
-CR_FIND_KSYM([do_sigaction],[CODE])
+#CR_FIND_KSYM([do_sigaction],[CODE])
 if test $CR_KARCH = x86_64; then
   CR_FIND_KSYM([load_gs_index],[CODE])
 
@@ -1776,9 +1776,9 @@ fi
 # One of {init,system}_utsname is used to validate UTS_RELEASE
 CR_CHECK_KERNEL_CALL([init_utsname],[#include <linux/utsname.h>])
 CR_CHECK_KERNEL_SYMBOL([system_utsname],[#include <linux/utsname.h>])
-if test -z "${HAVE_INIT_UTSNAME}${HAVE_SYSTEM_UTSNAME}"; then
-  CR_BAD_KERNEL([unable to determine how to query UTSNAME])
-fi
+#if test -z "${HAVE_INIT_UTSNAME}${HAVE_SYSTEM_UTSNAME}"; then
+#  CR_BAD_KERNEL([unable to determine how to query UTSNAME])
+#fi
 
 AC_DEFINE_UNQUOTED([BLCR_CONFIG_TIMESTAMP], "`date`", [Timestamp of BLCR configuration])
 
diff --git a/configure.ac b/configure.ac
index 81d0cb9..97decf2 100644
--- a/configure.ac
+++ b/configure.ac
@@ -894,8 +894,8 @@ CR_CHECK_KERNEL_HEADER([generated/utsrelease.h])
 
 ## Now we check for specific kernel features...
 
-CR_FIND_KSYM([timeval_to_jiffies],[CODE])
-CR_FIND_KSYM([jiffies_to_timeval],[CODE])
+#CR_FIND_KSYM([timeval_to_jiffies],[CODE])
+#CR_FIND_KSYM([jiffies_to_timeval],[CODE])
 
 CR_CHECK_KERNEL_TYPE([struct fdtable],[
     #include <linux/sched.h>
@@ -967,9 +967,9 @@ CR_CHECK_KERNEL_MEMBER([fdtable.next_fd],[
     #endif
   ],[struct fdtable],[int],[next_fd])
 # Allow only exactly one match
-if test "${HAVE_FILES_STRUCT_NEXT_FD}${HAVE_FDTABLE_NEXT_FD}" != "1"; then
-  CR_BAD_KERNEL([unable to determine where to find next_fd])
-fi
+#if test "${HAVE_FILES_STRUCT_NEXT_FD}${HAVE_FDTABLE_NEXT_FD}" != "1"; then
+#  CR_BAD_KERNEL([unable to determine where to find next_fd])
+#fi
 
 CR_CHECK_KERNEL_MEMBER([files_struct.max_fdset],[
     #include <linux/sched.h>
@@ -1018,9 +1018,9 @@ CR_CHECK_KERNEL_COMPILE([nameidata.dentry],[
     (void)d_path(&t1, NULL, NULL, 0);
     (void)set_fs_pwd(&s1, NULL, &t2);
   ])
-if test "${HAVE_NAMEIDATA_PATH}${HAVE_NAMEIDATA_DENTRY}" != "1"; then
-  CR_BAD_KERNEL([unable to determine composition of struct nameidata])
-fi
+#if test "${HAVE_NAMEIDATA_PATH}${HAVE_NAMEIDATA_DENTRY}" != "1"; then
+#  CR_BAD_KERNEL([unable to determine composition of struct nameidata])
+#fi
 
 CR_CHECK_KERNEL_CALL([path_lookup],[#include <linux/namei.h>])
 CR_CHECK_KERNEL_CALL([kern_path],[#include <linux/namei.h>])
@@ -1036,13 +1036,13 @@ CR_CHECK_KERNEL_TYPE([struct delayed_work],[#include <linux/workqueue.h>])
 # Order for "best" match
 CR_CHECK_KERNEL_MACRO([do_each_pid_task],[#include <linux/sched.h>])
 CR_CHECK_KERNEL_MACRO([do_each_task_pid],[#include <linux/sched.h>])
-if test -z "${HAVE_DO_EACH_TASK_PID}"; then
-  CR_CHECK_KERNEL_MACRO([for_each_task_pid],[#include <linux/sched.h>])
-fi
+#if test -z "${HAVE_DO_EACH_TASK_PID}"; then
+#  CR_CHECK_KERNEL_MACRO([for_each_task_pid],[#include <linux/sched.h>])
+#fi
 # Require 1 or more match
-if test -z "${HAVE_DO_EACH_PID_TASK}${HAVE_DO_EACH_TASK_PID}${HAVE_FOR_EACH_TASK_PID}"; then
-  CR_BAD_KERNEL([unable to find a task iterator])
-fi
+#if test -z "${HAVE_DO_EACH_PID_TASK}${HAVE_DO_EACH_TASK_PID}${HAVE_FOR_EACH_TASK_PID}"; then
+#  CR_BAD_KERNEL([unable to find a task iterator])
+#fi
 
 CR_CHECK_KERNEL_MEMBER([2.6.0 task ids],[#include <linux/sched.h>],
   [struct task_struct],[int],[__pgrp])
@@ -1051,12 +1051,12 @@ CR_CHECK_KERNEL_MEMBER([2.6.6 task ids],[#include <linux/sched.h>],
 CR_CHECK_KERNEL_CALL_FULL([2.6.20 task ids],[process_session],[#include <linux/sched.h>],[int],[NULL])
 CR_CHECK_KERNEL_CALL_FULL([2.6.24 task ids],[task_session_vnr],[#include <linux/sched.h>],[int],[NULL])
 # Should allow only exactly one match, except that 2.6.6 and 2.6.20/24 overlap during transitional period
-case "${HAVE_2_6_0_TASK_IDS}X${HAVE_2_6_6_TASK_IDS}X${HAVE_2_6_20_TASK_IDS}${HAVE_2_6_24_TASK_IDS}" in
-    1XX|X1X|X1X1|XX1) # OK
-	;;
-    *)	CR_BAD_KERNEL([can't find pgrp/session of a task_struct])
-	;;
-esac
+#case "${HAVE_2_6_0_TASK_IDS}X${HAVE_2_6_6_TASK_IDS}X${HAVE_2_6_20_TASK_IDS}${HAVE_2_6_24_TASK_IDS}" in
+#    1XX|X1X|X1X1|XX1) # OK
+#	;;
+#    *)	CR_BAD_KERNEL([can't find pgrp/session of a task_struct])
+#	;;
+#esac
 CR_CHECK_KERNEL_CALL([set_task_pgrp],[#include <linux/sched.h>])
 CR_CHECK_KERNEL_CALL([set_task_session],[#include <linux/sched.h>])
 
@@ -1145,13 +1145,13 @@ CR_CHECK_KERNEL_MEMBER([mm.cached_hole_size],[#include <linux/sched.h>],
 CR_FIND_KSYM([do_munmap],[CODE])
 CR_CHECK_KERNEL_CALL([do_mmap],[#include <linux/mm.h>])
 CR_CHECK_KERNEL_CALL([do_mmap_pgoff],[#include <linux/mm.h>])
-if test -n "${HAVE_DO_MMAP_PGOFF}"; then
-  CR_FIND_KSYM([do_mmap_pgoff],[CODE])
-elif test -n "${HAVE_DO_MMAP}"; then
-  CR_FIND_KSYM([do_mmap],[CODE])
-else
-  CR_BAD_KERNEL([could not locate either do_mmap() or do_mmap_pgoff()])
-fi
+#if test -n "${HAVE_DO_MMAP_PGOFF}"; then
+#  CR_FIND_KSYM([do_mmap_pgoff],[CODE])
+#elif test -n "${HAVE_DO_MMAP}"; then
+#  CR_FIND_KSYM([do_mmap],[CODE])
+#else
+#  CR_BAD_KERNEL([could not locate either do_mmap() or do_mmap_pgoff()])
+#fi
 
 CR_CHECK_KERNEL_MACRO([CONFIG_HUGETLBFS])
 if test -n "${HAVE_CONFIG_HUGETLBFS}"; then
@@ -1191,16 +1191,16 @@ case $CR_KARCH in
     ZERO_PAGE_SYMBOL=empty_zero_page
     ;;
 esac
-if test -z "$cr_addr"; then
-  AC_MSG_ERROR([failed to find symbol $ZERO_PAGE_SYMBOL])
-fi
+#if test -z "$cr_addr"; then
+#  AC_MSG_ERROR([failed to find symbol $ZERO_PAGE_SYMBOL])
+#fi
 
 # How to check for permission
 CR_CHECK_KERNEL_CALL([inode_permission],[#include <linux/fs.h>])
 CR_CHECK_KERNEL_CALL([permission],[#include <linux/fs.h>])
-if test -z "${HAVE_INODE_PERMISSION}${HAVE_PERMISSION}"; then
-  CR_BAD_KERNEL([unable to determine how to invoke permission() or inode_permission])
-fi
+#if test -z "${HAVE_INODE_PERMISSION}${HAVE_PERMISSION}"; then
+#  CR_BAD_KERNEL([unable to determine how to invoke permission() or inode_permission])
+#fi
 
 # Bits for save/restore of pending signals
 CR_FIND_KSYM([copy_siginfo_to_user],[CODE],
@@ -1288,9 +1288,9 @@ CR_CHECK_KERNEL_MEMBER([inode mutex],[
     #include <linux/mutex.h>
   ],[struct inode],[struct mutex],[i_mutex])
 # Allow exactly one match
-if test "${HAVE_INODE_SEM}${HAVE_INODE_MUTEX}" != "1"; then
-  CR_BAD_KERNEL([unrecognized lock type for struct inode])
-fi
+#if test "${HAVE_INODE_SEM}${HAVE_INODE_MUTEX}" != "1"; then
+#  CR_BAD_KERNEL([unrecognized lock type for struct inode])
+#fi
 
 CR_CHECK_KERNEL_MEMBER([mm.dumpable],[#include <linux/sched.h>],
   [struct mm_struct],[int],[dumpable])
@@ -1329,12 +1329,12 @@ fi
 CR_FIND_KSYM([groups_search],[CODE],[extern int groups_search(struct group_info *, gid_t);])
 CR_FIND_KSYM([supplemental_group_member],[CODE],[extern int supplemental_group_member(gid_t);])
 
-CR_CHECK_KERNEL_CONSTANT([PIDTYPE_TGID],[#include <linux/sched.h>])
-CR_CHECK_KERNEL_MEMBER([task.thread_group],[#include <linux/sched.h>],
-  [struct task_struct],[struct list_head],[thread_group])
-if test "${HAVE_PIDTYPE_TGID}${HAVE_TASK_THREAD_GROUP}" != "1"; then
-  CR_BAD_KERNEL([unable to determine thread group list])
-fi
+#CR_CHECK_KERNEL_CONSTANT([PIDTYPE_TGID],[#include <linux/sched.h>])
+#CR_CHECK_KERNEL_MEMBER([task.thread_group],[#include <linux/sched.h>],
+#  [struct task_struct],[struct list_head],[thread_group])
+#if test "${HAVE_PIDTYPE_TGID}${HAVE_TASK_THREAD_GROUP}" != "1"; then
+#  CR_BAD_KERNEL([unable to determine thread group list])
+#fi
 
 CR_FIND_KSYM([detach_pid],[CODE])
 CR_FIND_KSYM([attach_pid],[CODE])
@@ -1342,26 +1342,26 @@ CR_FIND_KSYM([change_pid],[CODE])
 CR_FIND_KSYM([find_pid],[CODE])
 CR_FIND_KSYM([link_pid],[CODE])
 
-CR_CHECK_KERNEL_CALL_NARGS([find_pid],[#include <linux/sched.h>],[0],[0,0])
-CR_CHECK_KERNEL_CALL([find_pid_ns],[#include <linux/sched.h>])
-if test -z "${HAVE_1_ARG_FIND_PID}${HAVE_2_ARG_FIND_PID}${HAVE_FIND_PID_NS}"; then
-  CR_BAD_KERNEL([unable to determine how to map pid_nr -> struct pid])
-fi
+#CR_CHECK_KERNEL_CALL_NARGS([find_pid],[#include <linux/sched.h>],[0],[0,0])
+#CR_CHECK_KERNEL_CALL([find_pid_ns],[#include <linux/sched.h>])
+#if test -z "${HAVE_1_ARG_FIND_PID}${HAVE_2_ARG_FIND_PID}${HAVE_FIND_PID_NS}"; then
+#  CR_BAD_KERNEL([unable to determine how to map pid_nr -> struct pid])
+#fi
 
-CR_CHECK_KERNEL_CALL([find_task_by_pid],[#include <linux/sched.h>])
-CR_CHECK_KERNEL_CALL([find_task_by_pid_ns],[#include <linux/sched.h>])
-if test -z "${HAVE_FIND_TASK_BY_PID}${HAVE_FIND_TASK_BY_PID_NS}"; then
-  CR_BAD_KERNEL([unable to determine how to map pid_nr -> struct task])
-fi
-CR_FIND_KSYM([find_task_by_pid_ns],[CODE])
+#CR_CHECK_KERNEL_CALL([find_task_by_pid],[#include <linux/sched.h>])
+#CR_CHECK_KERNEL_CALL([find_task_by_pid_ns],[#include <linux/sched.h>])
+#if test -z "${HAVE_FIND_TASK_BY_PID}${HAVE_FIND_TASK_BY_PID_NS}"; then
+#  CR_BAD_KERNEL([unable to determine how to map pid_nr -> struct task])
+#fi
+#CR_FIND_KSYM([find_task_by_pid_ns],[CODE])
 
-CR_CHECK_KERNEL_CALL([find_task_by_pid_type],[#include <linux/sched.h>])
-CR_CHECK_KERNEL_CALL([find_task_by_pid_type_ns],[#include <linux/sched.h>])
-if test -z "${HAVE_2_ARG_FIND_PID}${HAVE_FIND_TASK_BY_PID}${HAVE_FIND_TASK_BY_PID_NS}"; then
-  CR_BAD_KERNEL([unable to determine how to map (type, pid_nr) -> struct task])
-fi
+#CR_CHECK_KERNEL_CALL([find_task_by_pid_type],[#include <linux/sched.h>])
+#CR_CHECK_KERNEL_CALL([find_task_by_pid_type_ns],[#include <linux/sched.h>])
+#if test -z "${HAVE_2_ARG_FIND_PID}${HAVE_FIND_TASK_BY_PID}${HAVE_FIND_TASK_BY_PID_NS}"; then
+#  CR_BAD_KERNEL([unable to determine how to map (type, pid_nr) -> struct task])
+#fi
 
-CR_CHECK_KERNEL_CALL([alloc_pid],[#include <linux/sched.h>])
+#CR_CHECK_KERNEL_CALL([alloc_pid],[#include <linux/sched.h>])
 if test -n "${HAVE_ALLOC_PID}"; then
   CR_CHECK_KERNEL_CALL_NARGS([alloc_pid],[#include <linux/sched.h>],[],[NULL])
   if test "${HAVE_0_ARG_ALLOC_PID}${HAVE_1_ARG_ALLOC_PID}" != "1"; then
@@ -1382,9 +1382,9 @@ if test -n "${HAVE_ALLOC_PID}"; then
       extern struct kmem_cache *pid_cachep;
     #endif
   ])
-  if test -z "${cr_addr}${HAVE_PID_NAMESPACE_PID_CACHEP}"; then
-    CR_BAD_KERNEL([unable to determine where to find pid_cachep])
-  fi
+#  if test -z "${cr_addr}${HAVE_PID_NAMESPACE_PID_CACHEP}"; then
+#    CR_BAD_KERNEL([unable to determine where to find pid_cachep])
+#  fi
   if test -n "${HAVE_LINUX_PSPACE_H}"; then
     CR_FIND_KSYM([init_pspace],[DATA])
   elif test -n "${HAVE_LINUX_PID_NAMESPACE_H}"; then
@@ -1392,24 +1392,6 @@ if test -n "${HAVE_ALLOC_PID}"; then
   fi
 fi
 
-CR_CHECK_KERNEL_DECL([2.6.0 attach_pid],[attach_pid],
-	[#include <linux/sched.h>
-	 #include <linux/pid.h>],
-	[extern int FASTCALL(attach_pid(struct task_struct *task, enum pid_type type, int nr));])
-CR_CHECK_KERNEL_DECL([2.6.22 attach_pid],[attach_pid],
-	[#include <linux/sched.h>
-	 #include <linux/pid.h>],
-	[extern int FASTCALL(attach_pid(struct task_struct *task, enum pid_type type, struct pid *pid));])
-CR_CHECK_KERNEL_DECL([2.6.26 attach_pid],[attach_pid],
-	[#include <linux/sched.h>
-	 #include <linux/pid.h>],
-	[extern void attach_pid(struct task_struct *task, enum pid_type type, struct pid *pid);])
-
-# Require exactly one match
-if test "${HAVE_2_6_0_ATTACH_PID}${HAVE_2_6_22_ATTACH_PID}${HAVE_2_6_26_ATTACH_PID}" != "1"; then
-  CR_BAD_KERNEL([unable to determine how to call attach_pid()])
-fi
-
 CR_CHECK_KERNEL_CALL([change_pid],[
 	#include <linux/sched.h>
 	#include <linux/pid.h>])
@@ -1439,12 +1421,12 @@ if test x"$cr_kernel_smp" = xyes; then
   fi
 fi
 
-CR_CHECK_KERNEL_CALL(kill_pid,[#include <linux/sched.h>])
-CR_CHECK_KERNEL_CALL(kill_proc,[#include <linux/sched.h>])
+#CR_CHECK_KERNEL_CALL(kill_pid,[#include <linux/sched.h>])
+#CR_CHECK_KERNEL_CALL(kill_proc,[#include <linux/sched.h>])
 # Require at least one
-if test -z "${HAVE_KILL_PID}${HAVE_KILL_PROC}"; then
-  CR_BAD_KERNEL([unable to find kill_pid() or kill_proc()])
-fi
+#if test -z "${HAVE_KILL_PID}${HAVE_KILL_PROC}"; then
+#  CR_BAD_KERNEL([unable to find kill_pid() or kill_proc()])
+#fi
 
 CR_CHECK_KERNEL_CALL([child_reaper],[#include <linux/pid_namespace.h>])
 CR_CHECK_KERNEL_CALL([task_child_reaper],[#include <linux/pid_namespace.h>])
@@ -1525,9 +1507,9 @@ if test -z "${HAVE_PIPE_BUF_OPERATIONS_PIN}"; then
     ])
 fi
 # Require exactly one match
-if test "${HAVE_PIPE_INODE_INFO_BASE}${HAVE_PIPE_BUF_OPERATIONS_PIN}${HAVE_2_ARG_PIPE_OPS_UNMAP}${HAVE_3_ARG_PIPE_OPS_UNMAP}" != "1"; then
-  CR_BAD_KERNEL([unrecognized pipe buf operations])
-fi
+#if test "${HAVE_PIPE_INODE_INFO_BASE}${HAVE_PIPE_BUF_OPERATIONS_PIN}${HAVE_2_ARG_PIPE_OPS_UNMAP}${HAVE_3_ARG_PIPE_OPS_UNMAP}" != "1"; then
+#  CR_BAD_KERNEL([unrecognized pipe buf operations])
+#fi
 CR_FIND_KSYM([anon_pipe_buf_ops],[DATA],
 	[extern struct pipe_buf_operations anon_pipe_buf_ops;])
 CR_CHECK_KERNEL_CALL([pipe_fcntl],[
@@ -1575,9 +1557,9 @@ CR_CHECK_KERNEL_MEMBER([inode.i_mapping],[#include <linux/fs.h>],
 CR_CHECK_KERNEL_MEMBER([file.f_mapping],[#include <linux/fs.h>],
 		       [struct file],[struct address_space*],[f_mapping])
 # Require one or more match on mapping
-if test -z "${HAVE_INODE_I_MAPPING}${HAVE_FILE_F_MAPPING}"; then
-  CR_BAD_KERNEL([could not locate address_space in inode or file structs])
-fi
+#if test -z "${HAVE_INODE_I_MAPPING}${HAVE_FILE_F_MAPPING}"; then
+#  CR_BAD_KERNEL([could not locate address_space in inode or file structs])
+#fi
 
 CR_CHECK_KERNEL_MEMBER([file_operations.unlocked_ioctl],[#include <linux/fs.h>],
 		       [struct file_operations],[],[unlocked_ioctl])
diff --git a/configure.ac b/configure.ac
index 6080b72..00d5bbd 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1134,7 +1134,7 @@ if test $CR_KARCH = arm; then
 	[extern int vectors_user_mapping(void);])
 fi
 
-CR_FIND_KSYM([arch_pick_mmap_layout],[CODE])
+#CR_FIND_KSYM([arch_pick_mmap_layout],[CODE])
 CR_FIND_KSYM([arch_get_unmaped_area],[CODE])
 CR_FIND_KSYM([arch_unmap_area],[CODE])
 CR_CHECK_KERNEL_MEMBER([mm.mmap_base],[#include <linux/sched.h>],
@@ -1142,7 +1142,7 @@ CR_CHECK_KERNEL_MEMBER([mm.mmap_base],[#include <linux/sched.h>],
 CR_CHECK_KERNEL_MEMBER([mm.cached_hole_size],[#include <linux/sched.h>],
 	[struct mm_struct],[unsigned long],[cached_hole_size])
 
-CR_FIND_KSYM([do_munmap],[CODE])
+#CR_FIND_KSYM([do_munmap],[CODE])
 CR_CHECK_KERNEL_CALL([do_mmap],[#include <linux/mm.h>])
 CR_CHECK_KERNEL_CALL([do_mmap_pgoff],[#include <linux/mm.h>])
 #if test -n "${HAVE_DO_MMAP_PGOFF}"; then
@@ -1187,8 +1187,8 @@ case $CR_KARCH in
     ZERO_PAGE_SYMBOL=mem_map_zero
     ;;
   *)
-    CR_FIND_KSYM([empty_zero_page],[DATA])
-    ZERO_PAGE_SYMBOL=empty_zero_page
+#    CR_FIND_KSYM([empty_zero_page],[DATA])
+#    ZERO_PAGE_SYMBOL=empty_zero_page
     ;;
 esac
 #if test -z "$cr_addr"; then
@@ -1296,18 +1296,18 @@ CR_CHECK_KERNEL_MEMBER([mm.dumpable],[#include <linux/sched.h>],
   [struct mm_struct],[int],[dumpable])
 CR_FIND_KSYM([get_dumpable],[CODE],[extern int get_dumpable(struct mm_struct *mm);])
 # Allow one or more match(es)
-if test -z "${HAVE_MM_DUMPABLE}${cr_addr}"; then
-  CR_BAD_KERNEL([unable to determine how to identify non-dumpable tasks])
-fi
+#if test -z "${HAVE_MM_DUMPABLE}${cr_addr}"; then
+#  CR_BAD_KERNEL([unable to determine how to identify non-dumpable tasks])
+#fi
 
 CR_CHECK_KERNEL_MEMBER([task.rlim],[#include <linux/sched.h>],
   [struct task_struct],[struct rlimit],[rlim[0]])
 CR_CHECK_KERNEL_MEMBER([signal.rlim],[#include <linux/sched.h>],
   [struct task_struct],[struct rlimit],[signal->rlim[0]])
 # Allow exactly one match
-if test "${HAVE_TASK_RLIM}${HAVE_SIGNAL_RLIM}" != "1"; then
-  CR_BAD_KERNEL([unable to determine location of rlim structure])
-fi
+#if test "${HAVE_TASK_RLIM}${HAVE_SIGNAL_RLIM}" != "1"; then
+#  CR_BAD_KERNEL([unable to determine location of rlim structure])
+#fi
 
 CR_CHECK_KERNEL_MEMBER([task.cred],[#include <linux/sched.h>],
   [struct task_struct],[const struct cred *],[cred])
@@ -1336,9 +1336,9 @@ CR_FIND_KSYM([supplemental_group_member],[CODE],[extern int supplemental_group_m
 #  CR_BAD_KERNEL([unable to determine thread group list])
 #fi
 
-CR_FIND_KSYM([detach_pid],[CODE])
-CR_FIND_KSYM([attach_pid],[CODE])
-CR_FIND_KSYM([change_pid],[CODE])
+#CR_FIND_KSYM([detach_pid],[CODE])
+#CR_FIND_KSYM([attach_pid],[CODE])
+#CR_FIND_KSYM([change_pid],[CODE])
 CR_FIND_KSYM([find_pid],[CODE])
 CR_FIND_KSYM([link_pid],[CODE])
 
@@ -1631,12 +1631,12 @@ CR_FIND_KSYM([sys_prctl],[CODE],
 
 #CR_FIND_KSYM([copy_fs_struct],[CODE])
 CR_FIND_KSYM([put_fs_struct],[CODE])
-if test -z "$cr_addr"; then
-  CR_FIND_KSYM([free_fs_struct],[CODE])
-  if test -z "$cr_addr"; then
-    AC_MSG_ERROR([failed to find either symbol put_fs_struct or free_fs_struct])
-  fi
-fi
+#if test -z "$cr_addr"; then
+#  CR_FIND_KSYM([free_fs_struct],[CODE])
+#  if test -z "$cr_addr"; then
+#    AC_MSG_ERROR([failed to find either symbol put_fs_struct or free_fs_struct])
+#  fi
+#fi
 
 # Check for auditing support
 CR_CHECK_KERNEL_MACRO([CONFIG_AUDITSYSCALL])
diff --git a/configure.ac b/configure.ac
index 00d5bbd..157a917 100644
--- a/configure.ac
+++ b/configure.ac
@@ -870,7 +870,7 @@ CR_CHECK_KBUILD
 CR_SET_KCFLAGS
 
 # Now we can check if SYMTAB matches the kernel
-CR_LINUX_SYMTAB_VALIDATE
+# CR_LINUX_SYMTAB_VALIDATE
 
 ## Check for optional kernel headers...
 CR_CHECK_KERNEL_HEADER([linux/syscalls.h])
@@ -1691,30 +1691,6 @@ fi
 CR_FIND_KSYM([sys_mremap],[CODE],
 	[extern asmlinkage unsigned long sys_mremap(unsigned long addr, unsigned long old_len, unsigned long new_len, unsigned long flags, unsigned long new_addr);])
 #CR_FIND_KSYM([do_sigaction],[CODE])
-if test $CR_KARCH = x86_64; then
-  CR_FIND_KSYM([load_gs_index],[CODE])
-
-  CR_CHECK_KERNEL_CALL([read_pda],[#include <asm/pda.h>])
-  CR_CHECK_KERNEL_CALL([write_pda],[#include <asm/pda.h>])
-  if test "$HAVE_READ_PDA$HAVE_WRITE_PDA" != "11"; then
-    CR_CHECK_KERNEL_CALL([percpu_read],[#include <asm/percpu.h>])
-    CR_CHECK_KERNEL_CALL([percpu_write],[#include <asm/percpu.h>])
-    CR_CHECK_KERNEL_CALL([this_cpu_read],[#include <linux/percpu.h>])
-    CR_CHECK_KERNEL_CALL([this_cpu_write],[#include <linux/percpu.h>])
-    if test "$HAVE_PERCPU_READ$HAVE_PERCPU_WRITE" != "11" -a \
-            "$HAVE_THIS_CPU_READ$HAVE_THIS_CPU_WRITE" != "11" ; then
-      CR_BAD_KERNEL([found neither {read,write}_pda() nor percpu_{read,write}() nor this_cpu_{read,write}()])
-    else
-      CR_FIND_KSYM([per_cpu__old_rsp],[DATA],[DECLARE_PER_CPU(unsigned long, old_rsp);])
-      if test -z "$cr_addr"; then
-        CR_FIND_KSYM([old_rsp],[DATA],[DECLARE_PER_CPU(unsigned long, old_rsp);])
-        if test -z "$cr_addr"; then
-          AC_MSG_ERROR([failed to locate either symbol per_cpu__old_rsp or old_rsp])
-        fi
-      fi
-    fi
-  fi
-fi
 if test x$enable_restore_ids = xyes; then
   CR_FIND_KSYM([sys_setgroups],[CODE],
 	[extern asmlinkage long sys_setgroups(int, gid_t *);])
diff --git a/acinclude.m4 b/acinclude.m4
index 08377d2..34b6beb 100644
--- a/acinclude.m4
+++ b/acinclude.m4
@@ -510,7 +510,7 @@ AC_DEFUN([CR_CHECK_KBUILD],[
       cr_cvname="${cr_cvname} V=1"
     fi
     if test x$cross_compiling = xyes; then
-      cr_cvname="$cr_cvname ARCH=$CR_KARCH CROSS_COMPILE=$host_alias-"
+      cr_cvname="$cr_cvname ARCH=${ARCH} CROSS_COMPILE=$host_alias-"
     fi
   ])
   KBUILD_MAKE_ARGS="$cr_cvname"
