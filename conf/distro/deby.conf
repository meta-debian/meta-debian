DISTRO = "deby"
DISTRO_NAME = "Deby"
DISTRO_VERSION = "8.0"
DISTRO_CODENAME = "jessie"
SDK_VENDOR = "-debysdk"
SDK_VERSION := "${@'${DISTRO_VERSION}'}"

MAINTAINER = "meta-debian Development Team"

TARGET_VENDOR = "-deby"

#
# git repository configuration
#

DEBIAN_GIT_URI ??= "git://github.com/ystk"
DEBIAN_GIT_PROTOCOL ??= "https"
DEBIAN_GIT_PREFIX ??= "debian-"

MISC_GIT_URI ??= "git://github.com/ystk"
MISC_GIT_PROTOCOL ??= "https"
MISC_GIT_PREFIX ??= ""

LINUX_GIT_URI ??= "git://github.com/ystk"
LINUX_GIT_PROTOCOL ??= "https"
LINUX_GIT_PREFIX ??= ""
LINUX_GIT_REPO ??= "linux-cip.git"
LINUX_GIT_SRCREV ??= "linux-4.4.y-cip"

BOOTLOADER_GIT_URI ??= "git://github.com/ystk"
BOOTLOADER_GIT_PROTOCOL ??= "https"
BOOTLOADER_GIT_PREFIX ??= ""

#
# distro/poky.conf based configuration
#

LOCALCONF_VERSION = "1"
LAYER_CONF_VERSION ?= "6"

SDK_NAME = "${DISTRO}-${TCLIBC}-${SDK_ARCH}-${IMAGE_BASENAME}-${TUNE_PKGARCH}"
SDKPATH_DEFAULT ?= "/opt/${DISTRO}/${SDK_VERSION}"
SDKPATH = "${SDKPATH_DEFAULT}"

EXTRAOPKGCONFIG = "poky-feed-config-opkg"

TCLIBCAPPEND = ""

QEMU_TARGETS ?= "arm i386 mips mipsel ppc x86_64"
# Other QEMU_TARGETS "mips64 mips64el sh4"

# no mirror for fetching debian source codes
PREMIRRORS = ""
MIRRORS = ""

# The CONNECTIVITY_CHECK_URI's are used to test whether we can succesfully
# fetch from the network (and warn you if not). To disable the test set
# the variable to be empty.
# Git example url: git://git.yoctoproject.org/yocto-firewall-test;protocol=git;rev=HEAD

CONNECTIVITY_CHECK_URIS ??= " \
${DEBIAN_GIT_URI}/${DEBIAN_GIT_PREFIX}glibc.git;\
protocol=${DEBIAN_GIT_PROTOCOL};\
rev=${DISTRO_CODENAME}-master\
"

# currently only Debian 8.0 jessie is tested
# In Debian, tested distro names given by distro_identifier()
# depend on the following command and files:
# 1. lsb_release -ir => Debian-8*
# 2. /etc/lsb-release => (no package provide this file)
# 3. /etc/os-release => Debian-GNU-Linux-8*
SANITY_TESTED_DISTROS ?= " \
Debian-8* \n \
Debian-GNU-Linux-8* \n \
"

# Default hash policy for distro
BB_SIGNATURE_HANDLER ?= 'OEBasicHash'
#
# OELAYOUT_ABI allows us to notify users when the format of TMPDIR changes in
# an incompatible way. Such changes should usually be detailed in the commit
# that breaks the format and have been previously discussed on the mailing list
# with general agreement from the core team.
#
OELAYOUT_ABI = "8"

# QA check settings - a little stricter than the OE-Core defaults
WARN_QA = "textrel files-invalid incompatible-license xorg-driver-abi libdir \
           unknown-configure-option"
ERROR_QA = "dev-so debug-deps dev-deps debug-files arch pkgconfig la perms \
            useless-rpaths rpaths staticdev ldflags pkgvarcheck already-stripped \
            compile-host-path dep-cmp installed-vs-shipped install-host-path \
            packages-list perm-config perm-line perm-link pkgv-undefined \
            pn-overrides split-strip var-undefined version-going-backwards"

#
# distro/poky-tiny.conf based configuration
#

# Disable wide char support for ncurses as we don't include it in
# in the LIBC features below.
ENABLE_WIDEC="false"
# Drop native language support. This removes the
# eglibc->bash->gettext->libc-posix-clang-wchar dependency.
USE_NLS="no"
# Reconfigure eglibc for a smaller installation
# Comment out any of the lines below to disable them in the build
DISTRO_FEATURES_LIBC_TINY = "libc-libm libc-crypt"
DISTRO_FEATURES_LIBC_TINY_append_x86-64 = " libc-libm-big"
# Required for "who"
DISTRO_FEATURES_LIBC_MINIMAL = "libc-utmp libc-getlogin"
DISTRO_FEATURES_LIBC_REGEX = "libc-posix-regexp"
DISTRO_FEATURES_LIBC_NET = "libc-inet libc-nis"
DISTRO_FEATURES_LIBC = "${DISTRO_FEATURES_LIBC_TINY} \
                        ${DISTRO_FEATURES_LIBC_MINIMAL} \
                        ${DISTRO_FEATURES_LIBC_REGEX} \
                        ${DISTRO_FEATURES_LIBC_NET} \
                       "

# Comment out any of the lines below to disable them in the build
# DISTRO_FEATURES options:
# alsa bluetooth ext2 irda pcmcia usbgadget usbhost wifi nfs zeroconf pci
DISTRO_FEATURES_TINY = "pci"
DISTRO_FEATURES_NET = "ipv4"
DISTRO_FEATURES_USB = "usbhost"
#DISTRO_FEATURES_USBGADGET = "usbgadget"
#DISTRO_FEATURES_WIFI = "wifi"

DISTRO_FEATURES ?= "${DISTRO_FEATURES_TINY} \
                   ${DISTRO_FEATURES_NET} \
                   ${DISTRO_FEATURES_USB} \
                   ${DISTRO_FEATURES_USBGADGET} \
                   ${DISTRO_FEATURES_WIFI} \
                   ${DISTRO_FEATURES_LIBC} \
                  "

# Use tmpdevfs and the busybox runtime services
VIRTUAL-RUNTIME_dev_manager = ""
VIRTUAL-RUNTIME_login_manager = ""
VIRTUAL-RUNTIME_init_manager ?= "busybox"
VIRTUAL-RUNTIME_initscripts = ""
VIRTUAL-RUNTIME_keymaps = ""
VIRTUAL-RUNTIME_update-alternatives = ""

# By default, support only commonly used types
# Don't build live because it pulls a lot of dependencies
IMAGE_FSTYPES ?= "ext3 tar.gz"

# Drop v86d from qemu dependency list (we support serial)
# Drop grub from meta-intel BSPs
# FIXME: A different mechanism is needed here. We could define -tiny
#        variants of all compatible machines, but that leads to a lot
#        more machine configs to maintain long term.
MACHINE_ESSENTIAL_EXTRA_RDEPENDS = ""

# The mtrace script included by eglibc is a perl script. This means the system
# will build perl in case this package is installed. Since we don't care about
# this script for the purposes of tiny, remove the dependency from here.
RDEPENDS_${PN}-mtrace_pn-eglibc = ""

INHERIT += "blacklist"
PNBLACKLIST[build-appliance-image] = "not buildable with poky-tiny"
PNBLACKLIST[core-image-base] = "not buildable with poky-tiny"
PNBLACKLIST[core-image-clutter] = "not buildable with poky-tiny"
PNBLACKLIST[core-image-directfb] = "not buildable with poky-tiny"
PNBLACKLIST[core-image-full-cmdline] = "not buildable with poky-tiny"
PNBLACKLIST[core-image-lsb] = "not buildable with poky-tiny"
PNBLACKLIST[core-image-lsb-dev] = "not buildable with poky-tiny"
PNBLACKLIST[core-image-lsb-sdk] = "not buildable with poky-tiny"
PNBLACKLIST[core-image-rt] = "not buildable with poky-tiny"
PNBLACKLIST[core-image-rt-sdk] = "not buildable with poky-tiny"
PNBLACKLIST[core-image-sato] = "not buildable with poky-tiny"
PNBLACKLIST[core-image-sato-dev] = "not buildable with poky-tiny"
PNBLACKLIST[core-image-sato-sdk] = "not buildable with poky-tiny"
PNBLACKLIST[core-image-x11] = "not buildable with poky-tiny"
PNBLACKLIST[qt4e-demo-image] = "not buildable with poky-tiny"
PNBLACKLIST[core-image-weston] = "not buildable with poky-tiny"

# Disable python usage in opkg-utils since it won't build with tiny config
PACKAGECONFIG_pn-opkg-utils = ""

#
# Disable all PREFERRED_VERSIONs in default distro configuration.
# Specify preferred provider for some targets.
# This means all recipes in meta-debian have higher priority than
# recipes in other layers and bitbake automatically chooses them
# by default, while BBFILE_PRIORITY_debian is higher than others.
#

# use toolchain mode for Debian instead of the default
TCMODE ?= "deby"

# preferred providers and versions
require conf/distro/include/debian-preferred-provider.inc
require conf/distro/include/debian-preferred-version.inc
require conf/distro/include/nondebian-preferred-version.inc

# confirm that all sources except local files are fetched
# from repositories in meta-debian project
INHERIT += "src-uri-check"
SRC_URI_ALLOWED ??= "git://github.com/ystk/"

# generate summary information about rootfs and SDK
INHERIT += "summary"

# generate git tracing information and enable to re-build by tag
INHERIT += "git-tracer"

#
# features
#

# Disable unneeded features appended by bitbake.conf,
# which are not able to be disabled for OpenEmbedded build system.
# See "Feature Backfilling" in the Yocto Project reference manual.
DISTRO_FEATURES_BACKFILL_CONSIDERED = "pulseaudio sysvinit"

#
# overriding the default definitions
#

# override libexecdir paths defined in bitbake.conf
export libexecdir = "${libdir}/${BPN}"
libexecdir_native = "${libdir_native}/${BPN}"

# quick fix: revive from poky 2fcece7 to make SDK runnable
BUILDSDK_LDFLAGS = "-L${STAGING_LIBDIR} \
                    -Wl,-rpath-link,${STAGING_LIBDIR} \
                    -Wl,-rpath,${libdir} -Wl,-O1 \
                    -L${STAGING_DIR_HOST}${base_libdir} \
                    -Wl,-rpath-link,${STAGING_DIR_HOST}${base_libdir} \
                    -Wl,-rpath,${base_libdir} -Wl,-O1"

# Fix "Exception: DTB not found" when runqemu with qemuarm.
# Deby uses linux-base but Poky sets QB_DTB base on PREFERRED_VERSION_linux-yocto.
# If version of linux-yocto > 4.7, QB_DTB will be set to "zImage-versatile-pb.dtb"
# which is not available in the current linux-base.
DTB_FILE ?= ""
QB_DTB_qemuarm = "${DTB_FILE}"

# Function prelink_setup overwrites our /etc/ld.so.conf
# by poky's value which does not include /lib/${DEB_HOST_MULTIARCH}.
# This means, after bitbake image done, our build dir will become unusable.
IMAGE_PREPROCESS_COMMAND_remove = "prelink_setup;"
